#ifndef ICHECKDLG_H
#define ICHECKDLG_H

#include <qvariant.h>


#include <Qt3Support/Q3ButtonGroup>
#include <QtCore/QVariant>
#include <QtGui/QAction>
#include <QtGui/QApplication>
#include <QtGui/QButtonGroup>
#include <QtGui/QDialog>
#include <QtGui/QGridLayout>
#include <QtGui/QHBoxLayout>
#include <QtGui/QLabel>
#include <QtGui/QPushButton>
#include <QtGui/QSpacerItem>
#include <QtGui/QVBoxLayout>

class Ui_ICheckDlg
{
public:
    QVBoxLayout *vboxLayout;
    Q3ButtonGroup *ButtonGroup11;
    QHBoxLayout *hboxLayout;
    QGridLayout *gridLayout;
    QLabel *lb_transconnected_val;
    QLabel *lb_completeness_val;
    QLabel *lb_transconnected;
    QLabel *lb_statesreachable_val;
    QLabel *lb_deadlocks;
    QLabel *lb_statesreachable;
    QLabel *lb_completeness;
    QLabel *lb_unambcond;
    QLabel *pm_unambcond;
    QLabel *lb_startstate;
    QLabel *lb_endstatesreachable;
    QLabel *pm_endstate;
    QLabel *lb_endstatesreachable_val;
    QLabel *pm_startstate;
    QLabel *lb_endstate;
    QLabel *pm_deadlocks;
    QHBoxLayout *hboxLayout1;
    QSpacerItem *spacerItem;
    QPushButton *pb_ok;
    QSpacerItem *spacerItem1;

    void setupUi(QDialog *ICheckDlg)
    {
    if (ICheckDlg->objectName().isEmpty())
        ICheckDlg->setObjectName(QString::fromUtf8("ICheckDlg"));
    ICheckDlg->resize(323, 351);
    vboxLayout = new QVBoxLayout(ICheckDlg);
    vboxLayout->setSpacing(6);
    vboxLayout->setMargin(11);
    vboxLayout->setObjectName(QString::fromUtf8("vboxLayout"));
    ButtonGroup11 = new Q3ButtonGroup(ICheckDlg);
    ButtonGroup11->setObjectName(QString::fromUtf8("ButtonGroup11"));
    ButtonGroup11->setMinimumSize(QSize(20, 20));
    ButtonGroup11->setColumnLayout(0, Qt::Vertical);
    ButtonGroup11->layout()->setSpacing(6);
    ButtonGroup11->layout()->setMargin(11);
    hboxLayout = new QHBoxLayout();
    QBoxLayout *boxlayout = qobject_cast<QBoxLayout *>(ButtonGroup11->layout());
    if (boxlayout)
        boxlayout->addLayout(hboxLayout);
    hboxLayout->setAlignment(Qt::AlignTop);
    hboxLayout->setObjectName(QString::fromUtf8("hboxLayout"));
    gridLayout = new QGridLayout();
    gridLayout->setSpacing(6);
    gridLayout->setMargin(0);
    gridLayout->setObjectName(QString::fromUtf8("gridLayout"));
    lb_transconnected_val = new QLabel(ButtonGroup11);
    lb_transconnected_val->setObjectName(QString::fromUtf8("lb_transconnected_val"));
    lb_transconnected_val->setFrameShape(QFrame::Panel);
    lb_transconnected_val->setFrameShadow(QFrame::Sunken);
    lb_transconnected_val->setWordWrap(false);

    gridLayout->addWidget(lb_transconnected_val, 7, 0, 1, 1);

    lb_completeness_val = new QLabel(ButtonGroup11);
    lb_completeness_val->setObjectName(QString::fromUtf8("lb_completeness_val"));
    lb_completeness_val->setFrameShape(QFrame::Panel);
    lb_completeness_val->setFrameShadow(QFrame::Sunken);
    lb_completeness_val->setWordWrap(false);

    gridLayout->addWidget(lb_completeness_val, 4, 0, 1, 1);

    lb_transconnected = new QLabel(ButtonGroup11);
    lb_transconnected->setObjectName(QString::fromUtf8("lb_transconnected"));
    QSizePolicy sizePolicy(static_cast<QSizePolicy::Policy>(7), static_cast<QSizePolicy::Policy>(5));
    sizePolicy.setHorizontalStretch(0);
    sizePolicy.setVerticalStretch(0);
    sizePolicy.setHeightForWidth(lb_transconnected->sizePolicy().hasHeightForWidth());
    lb_transconnected->setSizePolicy(sizePolicy);
    lb_transconnected->setWordWrap(false);

    gridLayout->addWidget(lb_transconnected, 7, 1, 1, 1);

    lb_statesreachable_val = new QLabel(ButtonGroup11);
    lb_statesreachable_val->setObjectName(QString::fromUtf8("lb_statesreachable_val"));
    lb_statesreachable_val->setFrameShape(QFrame::Panel);
    lb_statesreachable_val->setFrameShadow(QFrame::Sunken);
    lb_statesreachable_val->setWordWrap(false);

    gridLayout->addWidget(lb_statesreachable_val, 5, 0, 1, 1);

    lb_deadlocks = new QLabel(ButtonGroup11);
    lb_deadlocks->setObjectName(QString::fromUtf8("lb_deadlocks"));
    sizePolicy.setHeightForWidth(lb_deadlocks->sizePolicy().hasHeightForWidth());
    lb_deadlocks->setSizePolicy(sizePolicy);
    lb_deadlocks->setWordWrap(false);

    gridLayout->addWidget(lb_deadlocks, 3, 1, 1, 1);

    lb_statesreachable = new QLabel(ButtonGroup11);
    lb_statesreachable->setObjectName(QString::fromUtf8("lb_statesreachable"));
    sizePolicy.setHeightForWidth(lb_statesreachable->sizePolicy().hasHeightForWidth());
    lb_statesreachable->setSizePolicy(sizePolicy);
    lb_statesreachable->setWordWrap(false);

    gridLayout->addWidget(lb_statesreachable, 5, 1, 1, 1);

    lb_completeness = new QLabel(ButtonGroup11);
    lb_completeness->setObjectName(QString::fromUtf8("lb_completeness"));
    lb_completeness->setWordWrap(false);

    gridLayout->addWidget(lb_completeness, 4, 1, 1, 1);

    lb_unambcond = new QLabel(ButtonGroup11);
    lb_unambcond->setObjectName(QString::fromUtf8("lb_unambcond"));
    sizePolicy.setHeightForWidth(lb_unambcond->sizePolicy().hasHeightForWidth());
    lb_unambcond->setSizePolicy(sizePolicy);
    lb_unambcond->setWordWrap(false);

    gridLayout->addWidget(lb_unambcond, 0, 1, 1, 1);

    pm_unambcond = new QLabel(ButtonGroup11);
    pm_unambcond->setObjectName(QString::fromUtf8("pm_unambcond"));
    QSizePolicy sizePolicy1(static_cast<QSizePolicy::Policy>(3), static_cast<QSizePolicy::Policy>(3));
    sizePolicy1.setHorizontalStretch(0);
    sizePolicy1.setVerticalStretch(0);
    sizePolicy1.setHeightForWidth(pm_unambcond->sizePolicy().hasHeightForWidth());
    pm_unambcond->setSizePolicy(sizePolicy1);
    pm_unambcond->setMinimumSize(QSize(20, 20));
    pm_unambcond->setMaximumSize(QSize(50, 50));
    pm_unambcond->setPixmap(icon(image0_ID));
    pm_unambcond->setScaledContents(false);
    pm_unambcond->setAlignment(Qt::AlignCenter);
    pm_unambcond->setWordWrap(false);

    gridLayout->addWidget(pm_unambcond, 0, 0, 1, 1);

    lb_startstate = new QLabel(ButtonGroup11);
    lb_startstate->setObjectName(QString::fromUtf8("lb_startstate"));
    sizePolicy.setHeightForWidth(lb_startstate->sizePolicy().hasHeightForWidth());
    lb_startstate->setSizePolicy(sizePolicy);
    lb_startstate->setWordWrap(false);

    gridLayout->addWidget(lb_startstate, 1, 1, 1, 1);

    lb_endstatesreachable = new QLabel(ButtonGroup11);
    lb_endstatesreachable->setObjectName(QString::fromUtf8("lb_endstatesreachable"));
    sizePolicy.setHeightForWidth(lb_endstatesreachable->sizePolicy().hasHeightForWidth());
    lb_endstatesreachable->setSizePolicy(sizePolicy);
    lb_endstatesreachable->setWordWrap(false);

    gridLayout->addWidget(lb_endstatesreachable, 6, 1, 1, 1);

    pm_endstate = new QLabel(ButtonGroup11);
    pm_endstate->setObjectName(QString::fromUtf8("pm_endstate"));
    sizePolicy1.setHeightForWidth(pm_endstate->sizePolicy().hasHeightForWidth());
    pm_endstate->setSizePolicy(sizePolicy1);
    pm_endstate->setMinimumSize(QSize(20, 20));
    pm_endstate->setMaximumSize(QSize(50, 50));
    pm_endstate->setPixmap(icon(image1_ID));
    pm_endstate->setScaledContents(false);
    pm_endstate->setAlignment(Qt::AlignCenter);
    pm_endstate->setWordWrap(false);

    gridLayout->addWidget(pm_endstate, 2, 0, 1, 1);

    lb_endstatesreachable_val = new QLabel(ButtonGroup11);
    lb_endstatesreachable_val->setObjectName(QString::fromUtf8("lb_endstatesreachable_val"));
    lb_endstatesreachable_val->setFrameShape(QFrame::Panel);
    lb_endstatesreachable_val->setFrameShadow(QFrame::Sunken);
    lb_endstatesreachable_val->setWordWrap(false);

    gridLayout->addWidget(lb_endstatesreachable_val, 6, 0, 1, 1);

    pm_startstate = new QLabel(ButtonGroup11);
    pm_startstate->setObjectName(QString::fromUtf8("pm_startstate"));
    sizePolicy1.setHeightForWidth(pm_startstate->sizePolicy().hasHeightForWidth());
    pm_startstate->setSizePolicy(sizePolicy1);
    pm_startstate->setMinimumSize(QSize(20, 20));
    pm_startstate->setMaximumSize(QSize(50, 50));
    pm_startstate->setPixmap(icon(image1_ID));
    pm_startstate->setScaledContents(false);
    pm_startstate->setAlignment(Qt::AlignCenter);
    pm_startstate->setWordWrap(false);

    gridLayout->addWidget(pm_startstate, 1, 0, 1, 1);

    lb_endstate = new QLabel(ButtonGroup11);
    lb_endstate->setObjectName(QString::fromUtf8("lb_endstate"));
    sizePolicy.setHeightForWidth(lb_endstate->sizePolicy().hasHeightForWidth());
    lb_endstate->setSizePolicy(sizePolicy);
    lb_endstate->setWordWrap(false);

    gridLayout->addWidget(lb_endstate, 2, 1, 1, 1);

    pm_deadlocks = new QLabel(ButtonGroup11);
    pm_deadlocks->setObjectName(QString::fromUtf8("pm_deadlocks"));
    sizePolicy1.setHeightForWidth(pm_deadlocks->sizePolicy().hasHeightForWidth());
    pm_deadlocks->setSizePolicy(sizePolicy1);
    pm_deadlocks->setMinimumSize(QSize(20, 20));
    pm_deadlocks->setMaximumSize(QSize(50, 50));
    pm_deadlocks->setPixmap(icon(image0_ID));
    pm_deadlocks->setScaledContents(false);
    pm_deadlocks->setAlignment(Qt::AlignCenter);
    pm_deadlocks->setWordWrap(false);

    gridLayout->addWidget(pm_deadlocks, 3, 0, 1, 1);


    hboxLayout->addLayout(gridLayout);


    vboxLayout->addWidget(ButtonGroup11);

    hboxLayout1 = new QHBoxLayout();
    hboxLayout1->setSpacing(6);
    hboxLayout1->setMargin(0);
    hboxLayout1->setObjectName(QString::fromUtf8("hboxLayout1"));
    spacerItem = new QSpacerItem(20, 20, QSizePolicy::Expanding, QSizePolicy::Minimum);

    hboxLayout1->addItem(spacerItem);

    pb_ok = new QPushButton(ICheckDlg);
    pb_ok->setObjectName(QString::fromUtf8("pb_ok"));
    pb_ok->setDefault(true);

    hboxLayout1->addWidget(pb_ok);

    spacerItem1 = new QSpacerItem(20, 20, QSizePolicy::Expanding, QSizePolicy::Minimum);

    hboxLayout1->addItem(spacerItem1);


    vboxLayout->addLayout(hboxLayout1);


    retranslateUi(ICheckDlg);
    QObject::connect(pb_ok, SIGNAL(clicked()), ICheckDlg, SLOT(accept()));

    QMetaObject::connectSlotsByName(ICheckDlg);
    } // setupUi

    void retranslateUi(QDialog *ICheckDlg)
    {
    ICheckDlg->setWindowTitle(QApplication::translate("ICheckDlg", "Integrity Check", 0, QApplication::UnicodeUTF8));
    ButtonGroup11->setTitle(QApplication::translate("ICheckDlg", "Result", 0, QApplication::UnicodeUTF8));
    lb_transconnected_val->setText(QApplication::translate("ICheckDlg", "100%", 0, QApplication::UnicodeUTF8));
    lb_completeness_val->setText(QApplication::translate("ICheckDlg", "100%", 0, QApplication::UnicodeUTF8));
    lb_transconnected->setText(QApplication::translate("ICheckDlg", "Transitions connected", 0, QApplication::UnicodeUTF8));
    lb_statesreachable_val->setText(QApplication::translate("ICheckDlg", "100%", 0, QApplication::UnicodeUTF8));
    lb_deadlocks->setText(QApplication::translate("ICheckDlg", "No dead locks", 0, QApplication::UnicodeUTF8));
    lb_statesreachable->setText(QApplication::translate("ICheckDlg", "States reachable", 0, QApplication::UnicodeUTF8));
    lb_completeness->setText(QApplication::translate("ICheckDlg", "Completeness", 0, QApplication::UnicodeUTF8));
    lb_unambcond->setText(QApplication::translate("ICheckDlg", "Unambiguous Conditions", 0, QApplication::UnicodeUTF8));
    lb_startstate->setText(QApplication::translate("ICheckDlg", "Start state", 0, QApplication::UnicodeUTF8));
    lb_endstatesreachable->setText(QApplication::translate("ICheckDlg", "End states reachable", 0, QApplication::UnicodeUTF8));
    lb_endstatesreachable_val->setText(QApplication::translate("ICheckDlg", "100%", 0, QApplication::UnicodeUTF8));
    lb_endstate->setText(QApplication::translate("ICheckDlg", "End state", 0, QApplication::UnicodeUTF8));
    pb_ok->setText(QApplication::translate("ICheckDlg", "OK", 0, QApplication::UnicodeUTF8));
    Q_UNUSED(ICheckDlg);
    } // retranslateUi


protected:
    enum IconID
    {
        image0_ID,
        image1_ID,
        unknown_ID
    };
    static QPixmap icon(IconID id)
    {
    static const unsigned char image0_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x8d, 0x89, 0x1d, 0x0d, 0x00, 0x00, 0x01,
    0xfa, 0x49, 0x44, 0x41, 0x54, 0x18, 0x95, 0xa5, 0x93, 0x31, 0x6f, 0x13,
    0x41, 0x10, 0x85, 0xbf, 0x3d, 0xb9, 0x38, 0x77, 0xb1, 0x94, 0x86, 0x92,
    0x12, 0x77, 0x68, 0xa5, 0x93, 0xd8, 0xab, 0x48, 0x3a, 0xdc, 0x19, 0x2a,
    0xe3, 0x0a, 0xbb, 0xb3, 0x3b, 0x5c, 0xa6, 0x8c, 0x3b, 0xd2, 0x25, 0x54,
    0xb8, 0x33, 0xa9, 0x08, 0x9d, 0xd3, 0x51, 0xde, 0x59, 0xb2, 0x74, 0xf0,
    0x13, 0x42, 0x17, 0x0a, 0xa4, 0xd0, 0x79, 0x0b, 0x4b, 0x4b, 0xe1, 0xd9,
    0xb0, 0x3e, 0xee, 0x62, 0x24, 0xa6, 0xb9, 0xdb, 0x9d, 0xd9, 0x37, 0x33,
    0x6f, 0xde, 0xa8, 0x62, 0x55, 0xc0, 0x06, 0x68, 0x80, 0xdd, 0x58, 0xe2,
    0x46, 0xfc, 0x5f, 0xe7, 0xc8, 0x6e, 0xec, 0xfd, 0x61, 0x6a, 0x52, 0xd7,
    0x4f, 0xb4, 0x0b, 0x83, 0x43, 0xff, 0xbf, 0x9c, 0x23, 0x7f, 0x39, 0x33,
    0xa9, 0x9b, 0x03, 0x9f, 0x80, 0x7e, 0xa2, 0x9d, 0xcf, 0xec, 0xfd, 0x75,
    0xe7, 0xa1, 0x49, 0xdd, 0x30, 0x88, 0x8f, 0xbc, 0xf3, 0x08, 0x68, 0x01,
    0x6d, 0x60, 0x01, 0x4c, 0xf6, 0x54, 0x3a, 0x4c, 0xb4, 0x5b, 0x1a, 0xed,
    0x16, 0xc0, 0x39, 0xd0, 0x91, 0xf8, 0xc8, 0x23, 0x5b, 0xe0, 0x8e, 0xad,
    0x3d, 0x06, 0xae, 0x80, 0x69, 0xa2, 0x5d, 0x6a, 0x52, 0x57, 0xae, 0xec,
    0x2c, 0xd1, 0xee, 0x1c, 0x18, 0x01, 0x31, 0xf0, 0x11, 0xf8, 0x41, 0x89,
    0xc3, 0x53, 0xe0, 0x0c, 0xc8, 0x81, 0xb5, 0x54, 0xfb, 0x01, 0xe8, 0x01,
    0xda, 0x68, 0xe7, 0xc1, 0x66, 0x89, 0x76, 0xa7, 0x80, 0x01, 0x6e, 0x80,
    0x21, 0xf0, 0x1e, 0xc8, 0xf2, 0x4c, 0xc5, 0x8d, 0x18, 0x55, 0xac, 0x8a,
    0x1d, 0x4e, 0x26, 0x46, 0xbb, 0x01, 0xf0, 0x5a, 0xaa, 0xbd, 0x03, 0xc6,
    0xc0, 0x2d, 0xf0, 0x52, 0x12, 0xb4, 0x24, 0xf1, 0x18, 0xf8, 0x16, 0x80,
    0xb1, 0x01, 0x95, 0xe5, 0xd9, 0x4e, 0x3b, 0x76, 0x63, 0x19, 0x9b, 0xd4,
    0x0d, 0x82, 0xc7, 0x6b, 0x79, 0x68, 0x24, 0xc9, 0x57, 0x01, 0xff, 0x1e,
    0x80, 0xf9, 0xf7, 0xea, 0x21, 0x1d, 0xfa, 0xf6, 0x5a, 0xfc, 0xb1, 0x1b,
    0x01, 0x2b, 0x57, 0x56, 0xa9, 0xc3, 0xf2, 0x34, 0x97, 0xf2, 0xd0, 0xdb,
    0x1a, 0x78, 0x57, 0x02, 0xab, 0xd5, 0x61, 0x95, 0xce, 0x7a, 0xc0, 0xb3,
    0x00, 0xb0, 0x09, 0x0c, 0x80, 0xa7, 0x50, 0xab, 0xcb, 0xa8, 0x4e, 0x67,
    0xb3, 0x64, 0x3b, 0x9c, 0xa6, 0x54, 0xb6, 0x90, 0x01, 0x3d, 0x01, 0xde,
    0x02, 0x69, 0x8d, 0x4e, 0xa3, 0xaa, 0x4c, 0xfd, 0x44, 0xbb, 0x51, 0xc0,
    0xdd, 0x25, 0xf0, 0x0a, 0xb8, 0x96, 0x04, 0x5d, 0xe0, 0x0d, 0x54, 0x76,
    0x56, 0xc9, 0xe1, 0x73, 0xd9, 0x18, 0x3f, 0x84, 0x0b, 0xb6, 0xc2, 0x9f,
    0x8a, 0x5c, 0x9a, 0x22, 0xea, 0xb1, 0x49, 0xdd, 0x5e, 0x0e, 0x3b, 0x22,
    0x19, 0x6f, 0xd7, 0x32, 0x84, 0x62, 0x55, 0xa8, 0x79, 0x5e, 0xa8, 0x13,
    0xd1, 0x64, 0x5b, 0x5a, 0xef, 0x08, 0x68, 0x2d, 0x87, 0x5d, 0xe1, 0xc9,
    0x8b, 0xfa, 0x4a, 0xfe, 0xef, 0x37, 0x2a, 0xcf, 0xd4, 0x89, 0xf8, 0xba,
    0xa2, 0xd5, 0xe3, 0xa0, 0xd2, 0x1d, 0x0e, 0x3b, 0xc1, 0x20, 0x90, 0xf6,
    0x96, 0xf2, 0x1f, 0x76, 0x32, 0xca, 0x0b, 0x75, 0x29, 0xf7, 0x93, 0xc3,
    0x03, 0x7a, 0x87, 0x07, 0xd5, 0x1c, 0x1e, 0x01, 0x8f, 0x24, 0xf0, 0x56,
    0xc0, 0xac, 0xb4, 0x5b, 0xee, 0xe4, 0x02, 0xf8, 0x2c, 0x0a, 0xb0, 0xc1,
    0x80, 0x1a, 0x3b, 0x6b, 0x07, 0xcc, 0x24, 0x20, 0x96, 0x0a, 0xa1, 0x7a,
    0x9a, 0xf3, 0x55, 0xa1, 0x5a, 0x2f, 0x8e, 0x5d, 0xfb, 0xe7, 0x2f, 0xbe,
    0x3c, 0xb4, 0xcb, 0x3a, 0xd1, 0x0e, 0x01, 0xb4, 0xfc, 0xbd, 0xab, 0xfb,
    0xbe, 0xbf, 0x01, 0x1e, 0xe9, 0x9c, 0xf4, 0x8b, 0x4a, 0xb6, 0x8d, 0x00,
    0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

    static const unsigned char image1_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x8d, 0x89, 0x1d, 0x0d, 0x00, 0x00, 0x01,
    0xb0, 0x49, 0x44, 0x41, 0x54, 0x18, 0x95, 0xa5, 0xd4, 0x3f, 0x8b, 0x13,
    0x51, 0x14, 0x86, 0xf1, 0xdf, 0x84, 0x08, 0xb1, 0xf0, 0x23, 0x08, 0x16,
    0x5a, 0x5a, 0xc8, 0xc5, 0x6a, 0x6a, 0x05, 0x0b, 0x8b, 0x14, 0x16, 0x16,
    0x5b, 0x58, 0x58, 0xd8, 0x6e, 0x67, 0xc4, 0x80, 0x0a, 0x8a, 0x88, 0x29,
    0xb6, 0x50, 0x50, 0xd0, 0x42, 0x70, 0x8b, 0x14, 0x11, 0x6c, 0x04, 0x45,
    0x04, 0xc9, 0x22, 0x8b, 0x17, 0x0b, 0x2d, 0x2d, 0x16, 0xb4, 0x10, 0xd6,
    0x42, 0xb0, 0x19, 0x48, 0xe0, 0x5a, 0xcc, 0x4c, 0xfe, 0xac, 0x6b, 0x96,
    0x98, 0x69, 0x86, 0x73, 0xee, 0xe1, 0x3d, 0x0f, 0xef, 0x39, 0xf7, 0x66,
    0x71, 0x3b, 0x32, 0x46, 0x93, 0x62, 0x5c, 0x68, 0x35, 0x5b, 0x2b, 0xc5,
    0x8d, 0x62, 0x5c, 0xcc, 0x1d, 0xae, 0x1a, 0x37, 0xeb, 0x64, 0xdd, 0x69,
    0x99, 0x38, 0x3c, 0x0c, 0xc9, 0x39, 0x3c, 0x27, 0x76, 0x62, 0x66, 0xac,
    0x24, 0xfc, 0x1f, 0x92, 0xb0, 0x19, 0x92, 0xbb, 0xb8, 0x80, 0x0d, 0xc2,
    0x7a, 0x48, 0x9a, 0x4a, 0xc2, 0xa5, 0xc9, 0x06, 0x21, 0xb9, 0x81, 0x23,
    0xca, 0xef, 0xe7, 0xaa, 0x1e, 0xae, 0xcd, 0x88, 0xbd, 0x46, 0x07, 0xef,
    0xca, 0xa6, 0x8d, 0x65, 0x3d, 0xcc, 0x5f, 0xe6, 0xc9, 0xf1, 0x19, 0xb1,
    0x2e, 0x5e, 0x11, 0xb7, 0xff, 0xe1, 0x61, 0xe8, 0x86, 0xb4, 0x88, 0x54,
    0x1b, 0x87, 0xf0, 0x09, 0x0f, 0xf0, 0xa1, 0x14, 0xab, 0xcf, 0x1b, 0x93,
    0xce, 0xfd, 0x3c, 0x85, 0x41, 0x48, 0x9e, 0xcc, 0x8b, 0xce, 0x92, 0x86,
    0x41, 0x48, 0x4e, 0xe3, 0x1b, 0xee, 0xe1, 0xc5, 0x94, 0xac, 0xae, 0x6f,
    0x16, 0xe3, 0x42, 0xfe, 0x34, 0x4f, 0xee, 0xcf, 0xf8, 0x72, 0x6a, 0x9e,
    0xac, 0xd5, 0x6c, 0x09, 0x3b, 0x21, 0xb9, 0x84, 0xdf, 0xb8, 0x85, 0xcd,
    0x29, 0xd9, 0x6c, 0xdd, 0x84, 0xd0, 0x57, 0x8c, 0x2a, 0xc1, 0xeb, 0xe4,
    0xef, 0xf3, 0x34, 0xdb, 0xd9, 0x67, 0x9c, 0x28, 0xfd, 0xaa, 0xc5, 0xf6,
    0xf3, 0xb8, 0x51, 0x8c, 0x0b, 0xf1, 0x4a, 0xcc, 0xf4, 0xcb, 0x42, 0x23,
    0x1c, 0xc6, 0x45, 0x42, 0x27, 0xa4, 0x49, 0xf1, 0x1a, 0x76, 0xf1, 0x88,
    0xf8, 0x76, 0xea, 0xd9, 0x5e, 0x8f, 0x27, 0x84, 0xb1, 0x1d, 0x33, 0x8f,
    0xcb, 0xf1, 0x83, 0xa3, 0x58, 0xaf, 0xbc, 0x7b, 0x16, 0x92, 0x63, 0xd5,
    0xd9, 0x1b, 0x0b, 0xb7, 0x61, 0x6e, 0x0f, 0x63, 0x2f, 0x66, 0x7a, 0xd5,
    0x3a, 0x8c, 0x70, 0x5e, 0x39, 0x88, 0xcb, 0xf8, 0x55, 0xe6, 0x87, 0x5b,
    0xc3, 0x6c, 0xd1, 0x9e, 0xfe, 0xb5, 0x87, 0xf1, 0x66, 0xcc, 0x74, 0xf1,
    0xb1, 0x22, 0xbd, 0x8d, 0x93, 0xf8, 0x8e, 0xfe, 0xc1, 0x7b, 0xba, 0xef,
    0x5d, 0x8e, 0x1b, 0x95, 0xe8, 0x6e, 0x25, 0x3a, 0xaa, 0x86, 0x76, 0xe6,
    0xe0, 0x1b, 0x95, 0x2d, 0x7a, 0x0f, 0xc3, 0x20, 0x24, 0x57, 0x2b, 0xd1,
    0xb3, 0x0c, 0x7b, 0xc3, 0x6c, 0xa5, 0xf7, 0x30, 0xb6, 0x63, 0xe6, 0x0e,
    0x7e, 0xcc, 0x0f, 0x62, 0x29, 0x0f, 0xf7, 0xc6, 0x76, 0x70, 0x0d, 0x5f,
    0x16, 0x4f, 0xb7, 0x8e, 0xb3, 0xe1, 0xd6, 0x70, 0x2e, 0xb9, 0xea, 0xff,
    0x0f, 0x67, 0xc8, 0xce, 0xc3, 0x9c, 0xe9, 0x2d, 0xd3, 0x00, 0x00, 0x00,
    0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

    switch (id) {
        case image0_ID:  { QImage img; img.loadFromData(image0_data, sizeof(image0_data), "PNG"); return QPixmap::fromImage(img); }
        case image1_ID:  { QImage img; img.loadFromData(image1_data, sizeof(image1_data), "PNG"); return QPixmap::fromImage(img); }
        default: return QPixmap();
    } // switch
    } // icon

};

namespace Ui {
    class ICheckDlg: public Ui_ICheckDlg {};
} // namespace Ui

class ICheckDlg : public QDialog, public Ui::ICheckDlg
{
    Q_OBJECT

public:
    ICheckDlg(QWidget* parent = 0, const char* name = 0, bool modal = false, Qt::WindowFlags fl = 0);
    ~ICheckDlg();

protected slots:
    virtual void languageChange();

};

#endif // ICHECKDLG_H
